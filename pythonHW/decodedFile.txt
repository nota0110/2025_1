///what happend?

노드 간의 엣지
엣지의 방향성에 따라 
다이렉티드/웨이티드(언)
싸이클(트리와 그래프의 주요 차이점!)

트리 : 노드 갯수가 v일 때 엣지가 노드보다 한 개 작아야 함.

## 저장 방법 
노드는 뭐... 어떻게든
어드제이션시...
엣지의 저장 : 
언다이렉티드 언웨이티드의 경우 : 
매트릭스 : 어떤 노드가 어떤 노드에 어떠한 가중치를 갖는지를.
이때 v^2의 크기를 가진 테이블이지만 v(v-1)/2사이즈로 줄일 수 있다. 

리스트 : 링크드리스트(혹은 딕셔너리)
v+2E인데 배수는 스페이스컴플렉시티에 포함되지 않으므로 v+E
다이렉티드의 경우 진짜 V+E


## 그래프 탐색!

시간 복잡도는 항상 v+2
BFS : 너비 우선 탐색
가로(레벨별로,,,,? 아니, 인접한 녀석들로. )
큐...식이라고 이해 가능 루트 넣고, 팝 하면서 인접한 버텍스(노드)를 큐에 넣기. 

DFS 깊이 우선. 
최저 레벨 노드까지 갔다가 백트래킹해서.
스택 이용(재귀 호출)

### 심화
탐색 전의 노드는 화이트, 탐색 중이면 그레이, 탐색이 완료되면 블랙.
BFS에서는 큐에 넣으면서 그레이, 큐에서 팝하면서 블랙

DFS에서는 스타트타임(루트가 그레이가 됨 : discover time) 피니시타임(루트가 블랙이 됨)
하위가 완료가 되고 나서야 상위가 완료가 됨. 
[ { ( ) } ] (parent size theorem)

###엣지의 종류.
그레이와 블랙으로 넘어가지 않으므로 자연스럽게 싸이클이 배제되고
 트리엣지 : 데이터 참조 순서를 트리 형식으로 나타낸 것. 나타밸 수 있음. 그레이 - 화이트
 백엣지 : 트리 내에서 이미 거쳐온 ancestor 노드에 접근하는 엣지를 백엣지라고. 그레이-그레이
 포워드엣지 : 트리엣지가 될 수도 있었던 녀석 조상-먼 후손... 그레이-블랙
 크로스엣지 : 조상이 아닌 다른 노드로 이어지는 엣지. 생명 유전 파트처럼! 그레이 - 블랙


## 그래프의 표현!

connected graph : 모든 노드가 연결된 그래프
connected Component : 한 그래프 안에서 서로 단절된 커넥티드 컴포넌트가 복수 존재 가능.
spanning Graph : set[a,b,c,d], subset[]은 그 포함되어 있는 세트.
G(V,E)
subGraph G'(V,e) : 모든 노드를 포함하되 엣지는 일부만 포함해도 가능. 이걸 스패닝 그래프라고 함.
서브그래프>스패닝그래프>스패닝트리
21장~ 그래프

## 방향이 있는 그래프에서
특정 노드 쌍 (u,v)에서 
SCC : strongly connected Component
한 노드에서 다른 모든 노드와 양방향 연결이 가능한 컴포넌트의 경우 강연결되었다고 한다. 
엣지를 보는 게 아니라 경로를 본다!

##DFS의 활용
일의 순서
순서의 정렬(토플로지 : 위상 정렬)
위상 정렬은 경우의 수가 많음...DFS->FinishTime 내림차순 다이렉티드 어싸이클릭 그래프.